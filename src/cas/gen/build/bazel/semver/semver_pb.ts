// Copyright 2018 The Bazel Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file build/bazel/semver/semver.proto (package build.bazel.semver, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The full version of a given tool.
 *
 * @generated from message build.bazel.semver.SemVer
 */
export class SemVer extends Message<SemVer> {
  /**
   * The major version, e.g 10 for 10.2.3.
   *
   * @generated from field: int32 major = 1;
   */
  major = 0;

  /**
   * The minor version, e.g. 2 for 10.2.3.
   *
   * @generated from field: int32 minor = 2;
   */
  minor = 0;

  /**
   * The patch version, e.g 3 for 10.2.3.
   *
   * @generated from field: int32 patch = 3;
   */
  patch = 0;

  /**
   * The pre-release version. Either this field or major/minor/patch fields
   * must be filled. They are mutually exclusive. Pre-release versions are
   * assumed to be earlier than any released versions.
   *
   * @generated from field: string prerelease = 4;
   */
  prerelease = "";

  constructor(data?: PartialMessage<SemVer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "build.bazel.semver.SemVer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "major", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "minor", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "patch", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "prerelease", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SemVer {
    return new SemVer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SemVer {
    return new SemVer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SemVer {
    return new SemVer().fromJsonString(jsonString, options);
  }

  static equals(a: SemVer | PlainMessage<SemVer> | undefined, b: SemVer | PlainMessage<SemVer> | undefined): boolean {
    return proto3.util.equals(SemVer, a, b);
  }
}

